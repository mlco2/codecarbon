import os
import shutil
import subprocess
import sys
from typing import Dict

import pandas as pd

from codecarbon.core.util import detect_cpu_model
from codecarbon.external.logger import logger


def is_macmon_available() -> bool:
    try:
        macmon = MacMon()
        return macmon._log_file_path is not None
    except Exception as e:
        msg = "Not using macmon, exception occurred while instantiating"
        logger.debug(f"{msg} macmon : {e}")
        return False


class MacMon:
    """
    A class to interact with and retrieve power metrics on Apple Silicon devices using
    the `macmon` command-line tool.

    This class implements a singleton pattern for the macmon process to avoid
    running multiple instances simultaneously.

    Methods:
    --------
    __init__(output_dir: str = ".", n_points=10, interval=100,
             log_file_name="macmon_log.txt"):
        Initializes the Applemacmon instance, setting up the log file path,
        system info, and other configurations.

    get_details() -> Dict:
        Parses the log file generated by `macmon` and returns a dictionary
        containing the average CPU and GPU power consumption and energy deltas.

    start() -> None:
        Starts the macmon process if not already running.
    """

    _osx_silicon_exec = "macmon"

    def __init__(
        self,
        output_dir: str = ".",
        n_points=10,
        interval=100,
        log_file_name="macmon_log.txt",
    ) -> None:
        # Only initialize once
        self._log_file_path = os.path.join(output_dir, log_file_name)
        self._system = sys.platform.lower()
        self._n_points = n_points
        self._interval = interval
        self._setup_cli()
        self._process = None

    def _setup_cli(self) -> None:
        """
        Setup cli command to run macmon
        """
        if self._system.startswith("darwin"):
            cpu_model = detect_cpu_model()
            if cpu_model.startswith("Apple"):
                if shutil.which(self._osx_silicon_exec):
                    self._cli = self._osx_silicon_exec
                else:
                    msg = f"Macmon executable not found on {self._system}, install with `brew install macmon` or checkout https://github.com/vladkens/macmon for installation instructions"
                    raise FileNotFoundError(msg)
        else:
            raise SystemError("Platform not supported by MacMon")

    def _log_values(self) -> None:
        """
        Logs output from Macmon to a file. If a macmon process is already
        running, it will use the existing process instead of starting a new one.
        """
        import multiprocessing

        returncode = None
        if self._system.startswith("darwin"):
            # Run the MacMon command and capture its output
            cmd = [
                "macmon",
                "-i",
                str(self._interval),
                "pipe",
                "-s",
                str(self._n_points),
            ]
            lock = multiprocessing.Lock()
            with lock:
                with open(self._log_file_path, "a") as f:  # Open file in append mode
                    returncode = subprocess.call(
                        cmd, universal_newlines=True, stdout=f, text=True
                    )
        else:
            return None
        if returncode != 0:
            logger.warning(
                "Returncode while logging power values using " + f"Macmon: {returncode}"
            )
        return

    def get_details(self) -> Dict:
        """
        Fetches the CPU Power Details by fetching values from a logged csv file
        in _log_values function
        """
        self._log_values()
        details = dict()
        try:
            data = pd.read_json(self._log_file_path, lines=True)
            details["CPU Power"] = data["cpu_power"].mean()
            details["CPU Energy Delta"] = (self._interval / 1000) * (
                data["cpu_power"].astype(float)
            ).sum()
            details["GPU Power"] = data["gpu_power"].mean()
            details["GPU Energy Delta"] = (self._interval / 1000) * (
                data["gpu_power"].astype(float)
            ).sum()
            details["RAM Power"] = data["ram_power"].mean()
            details["RAM Energy Delta"] = (self._interval / 1000) * (
                data["ram_power"].astype(float)
            ).sum()
        except Exception as e:
            msg = (
                f"Unable to read macmon logged file at {self._log_file_path}\n"
                f"Exception occurred {e}"
            )
            logger.info(msg, exc_info=True)
        return details

    def start(self) -> None:
        # Start is handled in _log_values when needed
        pass
